import json
import logging
import requests
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from carwash.models import TelegramUser, Services, ServiceClasses, WashOrders
from employees.models import Employees

logger = logging.getLogger(__name__)

BOT_TOKEN = "8087998931:AAGykWvkx-deJ8G5O0kmfoI_TcJXl2fLMtE"
FALLBACK_ADMIN_IDS = {1207702857}


def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


def answer_callback_query(callback_query_id, text=None, show_alert=False):
    """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
    data = {
        'callback_query_id': callback_query_id,
        'show_alert': show_alert
    }
    if text:
        data['text'] = text

    try:
        requests.post(url, data=data, timeout=5)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")


def is_user_authorized(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if telegram_id in FALLBACK_ADMIN_IDS:
        return True
    return TelegramUser.objects.filter(telegram_id=str(telegram_id)).exists()


def is_user_admin(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if telegram_id in FALLBACK_ADMIN_IDS:
        return True
    try:
        user = TelegramUser.objects.get(telegram_id=str(telegram_id))
        return user.is_admin
    except TelegramUser.DoesNotExist:
        return False


def get_services_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Å–ª—É–≥–∞–º–∏"""
    try:
        services = Services.objects.all()
        buttons = []

        service_emojis = ['üöó', 'üöö', 'üèçÔ∏è', 'üöå', 'üöõ', 'üõª']

        for i, service in enumerate(services):
            emoji = service_emojis[i % len(service_emojis)]
            buttons.append([{
                'text': f"{emoji} {service.name_services}",
                'callback_data': f"service_{service.id}"
            }])

        return {'inline_keyboard': buttons}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: {e}")
        return {'inline_keyboard': []}


def get_service_classes_keyboard(service_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–ª–∞—Å—Å–∞–º–∏ —É—Å–ª—É–≥"""
    try:
        classes = ServiceClasses.objects.filter(services_id=service_id)
        buttons = []

        class_emojis = {
            '—ç–∫–æ–Ω–æ–º': 'ü•â',
            '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 'ü•à',
            '–ø—Ä–µ–º–∏—É–º': 'ü•á',
            'vip': 'üëë',
            '–ª—é–∫—Å': 'üíé'
        }

        for cls in classes:
            emoji = '‚≠ê'
            for key, value in class_emojis.items():
                if key in cls.name.lower():
                    emoji = value
                    break

            price_text = f" ‚Ä¢ {int(cls.price):,} UZS" if cls.price else " ‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
            buttons.append([{
                'text': f"{emoji} {cls.name}{price_text}",
                'callback_data': f"class_{cls.id}"
            }])

        buttons.append([{
            'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º",
            'callback_data': "back_to_services"
        }])

        return {'inline_keyboard': buttons}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤: {e}")
        return {'inline_keyboard': []}


def get_employees_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    try:
        employees = Employees.objects.all()
        buttons = []

        worker_emojis = ['üë®‚Äçüîß', 'üë©‚Äçüîß', 'üßë‚Äçüîß', 'üë®‚Äçüíº', 'üë©‚Äçüíº']

        for i, employee in enumerate(employees):
            emoji = worker_emojis[i % len(worker_emojis)]
            buttons.append([{
                'text': f"{emoji} {str(employee)}",
                'callback_data': f"employee_{employee.id}"
            }])

        buttons.append([{
            'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º",
            'callback_data': "back_to_classes"
        }])

        return {'inline_keyboard': buttons}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return {'inline_keyboard': []}


def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    buttons = [
        [{'text': 'üöó –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'callback_data': 'new_order'}],
        [{'text': 'üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'callback_data': 'add_user'}],
        [{'text': 'üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'callback_data': 'list_users'}],
        [{'text': 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'callback_data': 'delete_user'}],
    ]
    return {'inline_keyboard': buttons}


def handle_start_command(chat_id, user_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = user_data['id']
    first_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    username = user_data.get('username')

    # –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user, created = TelegramUser.objects.get_or_create(
            telegram_id=str(telegram_id),
            defaults={
                'first_name': first_name,
                'username': username,
                'is_admin': telegram_id in FALLBACK_ADMIN_IDS
            }
        )
        if not created:
            user.first_name = first_name
            user.username = username
            user.save()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    orders_count = WashOrders.objects.count()

    if is_user_admin(telegram_id):
        users_count = TelegramUser.objects.count()
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OltinWash!</b> üåü

–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>! üëã
üëë <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üî• <b>–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–æ–π–∫–∞ –≤ –¢–∞—à–∫–µ–Ω—Ç–µ</b>
‚ú® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –≤–∞—à–∏–º –∞–≤—Ç–æ
üíé –í—ã—Å–æ—á–∞–π—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{orders_count}</b>
üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>

üöó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
        keyboard = get_admin_keyboard()
    else:
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OltinWash!</b> üåü

–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>! üëã

üî• <b>–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–æ–π–∫–∞ –≤ –¢–∞—à–∫–µ–Ω—Ç–µ</b>
‚ú® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –≤–∞—à–∏–º –∞–≤—Ç–æ
üíé –í—ã—Å–æ—á–∞–π—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{orders_count}</b>

üöó <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>
"""
        keyboard = get_services_keyboard()

    send_message(chat_id, welcome_text, keyboard)


def handle_new_order(chat_id, message_id):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    text = """
üèÜ <b>–í–´–ë–û–† –£–°–õ–£–ì–ò</b> üèÜ

üî• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–π–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ:</b>
"""
    keyboard = get_services_keyboard()
    edit_message(chat_id, message_id, text, keyboard)


def handle_service_selection(chat_id, message_id, service_id):
    """–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏"""
    try:
        service = Services.objects.get(id=service_id)
        text = f"""
üéØ <b>–í–´–ë–û–† –ö–õ–ê–°–°–ê –£–°–õ–£–ì–ò</b>

üöó <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> {service.name_services}

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</b>
"""
        keyboard = get_service_classes_keyboard(service_id)
        edit_message(chat_id, message_id, text, keyboard)
    except Services.DoesNotExist:
        edit_message(chat_id, message_id, "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def handle_class_selection(chat_id, message_id, class_id):
    """–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ —É—Å–ª—É–≥–∏"""
    try:
        service_class = ServiceClasses.objects.get(id=class_id)
        price_text = f"{int(service_class.price):,} UZS" if service_class.price else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è —Ü–µ–Ω–∞"

        text = f"""
üë®‚Äçüîß <b>–í–´–ë–û–† –ú–ê–°–¢–ï–†–ê</b>

‚≠ê <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:</b> {service_class.name}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}

üî• <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:</b>
"""
        keyboard = get_employees_keyboard()
        edit_message(chat_id, message_id, text, keyboard)
    except ServiceClasses.DoesNotExist:
        edit_message(chat_id, message_id, "‚ùå –ö–ª–∞—Å—Å —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def handle_employee_selection(chat_id, message_id, employee_id):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        employee = Employees.objects.get(id=employee_id)
        text = f"""
‚úÖ <b>–ó–ê–ö–ê–ó –û–§–û–†–ú–õ–ï–ù!</b>

üë®‚Äçüîß <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä:</b> {employee}

üìû <b>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:</b>
- –¢–µ–ª–µ—Ñ–æ–Ω: +998 XX XXX XX XX
- –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

üïê <b>–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</b>

‚ú® <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä OltinWash!</b>
"""

        new_order_button = {
            'inline_keyboard': [[
                {'text': 'üöó –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', 'callback_data': 'new_order'}
            ]]
        }

        edit_message(chat_id, message_id, text, new_order_button)
    except Employees.DoesNotExist:
        edit_message(chat_id, message_id, "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def handle_list_users(chat_id, message_id):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = TelegramUser.objects.all().order_by('-created_at')

    users_text = f"""
üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>

üìä <b>–í—Å–µ–≥–æ:</b> {users.count()}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
"""

    for i, user in enumerate(users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
        admin_mark = " üëë" if user.is_admin else ""
        username_text = f" (@{user.username})" if user.username else ""
        users_text += f"<code>{i}. {user.telegram_id}</code> - {user.first_name}{username_text}{admin_mark}\n"

    if users.count() > 20:
        users_text += f"\n... –∏ –µ—â–µ {users.count() - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    back_button = {
        'inline_keyboard': [[
            {'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'admin_menu'}
        ]]
    }

    edit_message(chat_id, message_id, users_text, back_button)


def handle_admin_menu(chat_id, message_id):
    """–ê–¥–º–∏–Ω –º–µ–Ω—é"""
    orders_count = WashOrders.objects.count()
    users_count = TelegramUser.objects.count()

    text = f"""
üåü <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å OltinWash</b> üåü

üëë <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{orders_count}</b>
üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>

üöó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""

    keyboard = get_admin_keyboard()
    edit_message(chat_id, message_id, text, keyboard)


def send_access_denied(chat_id, user_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
    user_id = user_data['id']
    user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    deny_text = f"""
üö´ <b>–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù</b> üö´

‚ùå <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, {user_name}!</b>

üîí –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üë§ <b>–í–∞—à ID:</b> <code>{user_id}</code>

üìû <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>

‚ö†Ô∏è <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏</b>
"""

    send_message(chat_id, deny_text)


def process_message(message_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = message_data['chat']['id']
    user_data = message_data['from']
    text = message_data.get('text', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not is_user_authorized(user_data['id']):
        send_access_denied(chat_id, user_data)
        return

    if text == '/start':
        handle_start_command(chat_id, user_data)
    elif text == '/users' and is_user_admin(user_data['id']):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        users = TelegramUser.objects.all().order_by('-created_at')
        users_text = f"üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\nüìä <b>–í—Å–µ–≥–æ:</b> {users.count()}\n\n"

        for i, user in enumerate(users[:20], 1):
            admin_mark = " üëë" if user.is_admin else ""
            username_text = f" (@{user.username})" if user.username else ""
            users_text += f"<code>{i}. {user.telegram_id}</code> - {user.first_name}{username_text}{admin_mark}\n"

        send_message(chat_id, users_text)
    else:
        help_text = """
‚ùì <b>–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ö–û–ú–ê–ù–î–ê</b>

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
- /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
- /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üöó <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º</b>
"""
        send_message(chat_id, help_text)


def process_callback_query(callback_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
    query_id = callback_data['id']
    chat_id = callback_data['message']['chat']['id']
    message_id = callback_data['message']['message_id']
    user_data = callback_data['from']
    data = callback_data['data']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not is_user_authorized(user_data['id']):
        answer_callback_query(query_id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    answer_callback_query(query_id)

    if data == 'new_order':
        handle_new_order(chat_id, message_id)
    elif data == 'list_users':
        if is_user_admin(user_data['id']):
            handle_list_users(chat_id, message_id)
        else:
            answer_callback_query(query_id, "üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
    elif data == 'admin_menu':
        if is_user_admin(user_data['id']):
            handle_admin_menu(chat_id, message_id)
    elif data == 'back_to_services':
        handle_new_order(chat_id, message_id)
    elif data.startswith('service_'):
        service_id = int(data.split('_')[1])
        handle_service_selection(chat_id, message_id, service_id)
    elif data.startswith('class_'):
        class_id = int(data.split('_')[1])
        handle_class_selection(chat_id, message_id, class_id)
    elif data.startswith('employee_'):
        employee_id = int(data.split('_')[1])
        handle_employee_selection(chat_id, message_id, employee_id)
    elif data == 'add_user':
        if is_user_admin(user_data['id']):
            text = """
üë§ <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

üìù <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

üí° <b>–ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Django –∞–¥–º–∏–Ω–∫—É:</b>
/admin/

üîÑ <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</b>
"""
            edit_message(chat_id, message_id, text)
    elif data == 'delete_user':
        if is_user_admin(user_data['id']):
            text = """
üóëÔ∏è <b>–£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

üìù <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

üí° <b>–ü–æ–∫–∞ —É–¥–∞–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Django –∞–¥–º–∏–Ω–∫—É:</b>
/admin/

üîÑ <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é</b>
"""
            edit_message(chat_id, message_id, text)


@csrf_exempt
@require_POST
def telegram_webhook(request):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è webhook"""
    try:
        logger.info("Webhook –ø–æ–ª—É—á–µ–Ω")

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = json.loads(request.body.decode('utf-8'))
        logger.info(f"Update data: {update_data}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'message' in update_data:
            process_message(update_data['message'])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query
        elif 'callback_query' in update_data:
            process_callback_query(update_data['callback_query'])

        return HttpResponse("OK")

    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        return HttpResponse("Invalid JSON", status=400)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        import traceback
        traceback.print_exc()
        return HttpResponse(f"Error: {str(e)}", status=500)
