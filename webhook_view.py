import json
import logging
import requests
import os
from django.http import HttpResponse, HttpResponseForbidden
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from carwash.models import TelegramUser, Services, ServiceClasses, WashOrders
from employees.models import Employees
from django.core.files.base import ContentFile
from django.utils import timezone
import pytz
import re

logger = logging.getLogger('webhook_view')

BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET')
FALLBACK_ADMIN_IDS = {1207702857}

USER_STATES = {}
TASHKENT_TZ = pytz.timezone('Asia/Tashkent')

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not configured")
if not WEBHOOK_SECRET:
    logger.error("WEBHOOK_SECRET not configured")


def get_tashkent_time():
    return timezone.now().astimezone(TASHKENT_TZ)


def format_datetime(dt):
    if dt.tzinfo is None:
        dt = timezone.make_aware(dt)
    return dt.astimezone(TASHKENT_TZ).strftime('%d.%m.%Y %H:%M')


def get_user_state(user_id):
    return USER_STATES.get(str(user_id), {})


def set_user_state(user_id, state):
    USER_STATES[str(user_id)] = state


def clear_user_state(user_id):
    USER_STATES.pop(str(user_id), None)


def send_message(chat_id, text, reply_markup=None):
    if not BOT_TOKEN:
        return None

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return None


def edit_message(chat_id, message_id, text, reply_markup=None):
    if not BOT_TOKEN:
        return None

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)

    try:
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Edit message error: {e}")
        return None


def answer_callback_query(callback_query_id, text=None, show_alert=False):
    if not BOT_TOKEN:
        return

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
    data = {
        'callback_query_id': callback_query_id,
        'show_alert': show_alert
    }
    if text:
        data['text'] = text

    try:
        requests.post(url, data=data, timeout=5)
    except Exception as e:
        logger.error(f"Callback query error: {e}")


def download_photo(file_id):
    if not BOT_TOKEN:
        return None

    try:
        file_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id={file_id}"
        file_response = requests.get(file_url)
        file_data = file_response.json()

        if not file_data.get('ok'):
            return None

        file_path = file_data['result']['file_path']
        download_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        photo_response = requests.get(download_url)

        if photo_response.status_code == 200:
            return photo_response.content
        return None
    except Exception as e:
        logger.error(f"Photo download error: {e}")
        return None


def is_user_authorized(telegram_id):
    if telegram_id in FALLBACK_ADMIN_IDS:
        return True
    return TelegramUser.objects.filter(telegram_id=str(telegram_id)).exists()


def is_user_admin(telegram_id):
    if telegram_id in FALLBACK_ADMIN_IDS:
        return True
    try:
        user = TelegramUser.objects.get(telegram_id=str(telegram_id))
        return user.is_admin
    except TelegramUser.DoesNotExist:
        return False


def get_today_orders_count():
    today = get_tashkent_time().date()
    return WashOrders.objects.filter(time_create__date=today).count()


def get_services_keyboard():
    try:
        services = Services.objects.all()
        buttons = []
        service_emojis = ['üöó', 'üöö', 'üèçÔ∏è', 'üöå', 'üöõ', 'üõª']

        for i, service in enumerate(services):
            emoji = service_emojis[i % len(service_emojis)]
            buttons.append([{
                'text': f"{emoji} {service.name_services}",
                'callback_data': f"service_{service.id}"
            }])

        buttons.append([{
            'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            'callback_data': "main_menu"
        }])

        return {'inline_keyboard': buttons}
    except Exception as e:
        logger.error(f"Services keyboard error: {e}")
        return {'inline_keyboard': []}


def get_service_classes_keyboard(service_id):
    try:
        classes = ServiceClasses.objects.filter(services_id=service_id)
        buttons = []
        class_emojis = {
            '—ç–∫–æ–Ω–æ–º': 'ü•â',
            '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 'ü•à',
            '–ø—Ä–µ–º–∏—É–º': 'ü•á',
            'vip': 'üëë',
            '–ª—é–∫—Å': 'üíé'
        }

        for cls in classes:
            emoji = '‚≠ê'
            for key, value in class_emojis.items():
                if key in cls.name.lower():
                    emoji = value
                    break

            price_text = f" ‚Ä¢ {int(cls.price):,} UZS" if cls.price else " ‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
            buttons.append([{
                'text': f"{emoji} {cls.name}{price_text}",
                'callback_data': f"class_{cls.id}"
            }])

        buttons.append([{
            'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º",
            'callback_data': "back_to_services"
        }])

        return {'inline_keyboard': buttons}
    except Exception as e:
        logger.error(f"Service classes keyboard error: {e}")
        return {'inline_keyboard': []}


def get_employees_keyboard():
    try:
        employees = Employees.objects.filter(fired=False)
        buttons = []
        worker_emojis = ['üë®‚Äçüîß', 'üë©‚Äçüîß', 'üßë‚Äçüîß', 'üë®‚Äçüíº', 'üë©‚Äçüíº']

        for i, employee in enumerate(employees):
            emoji = worker_emojis[i % len(worker_emojis)]
            buttons.append([{
                'text': f"{emoji} {str(employee)}",
                'callback_data': f"employee_{employee.id}"
            }])

        buttons.append([{
            'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º",
            'callback_data': "back_to_classes"
        }])

        return {'inline_keyboard': buttons}
    except Exception as e:
        logger.error(f"Employees keyboard error: {e}")
        return {'inline_keyboard': []}


def get_admin_keyboard():
    buttons = [
        [{'text': 'üöó –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'callback_data': 'new_order'}],
        [{'text': 'üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'callback_data': 'add_user'}],
        [{'text': 'üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'callback_data': 'list_users'}],
        [{'text': 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã', 'callback_data': 'recent_orders'}],
    ]
    return {'inline_keyboard': buttons}


def handle_start_command(chat_id, user_data):
    telegram_id = user_data['id']
    first_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    username = user_data.get('username')

    clear_user_state(telegram_id)

    try:
        user, created = TelegramUser.objects.get_or_create(
            telegram_id=str(telegram_id),
            defaults={
                'first_name': first_name,
                'username': username,
                'is_admin': telegram_id in FALLBACK_ADMIN_IDS
            }
        )
        if not created:
            user.first_name = first_name
            user.username = username
            user.save()
    except Exception as e:
        logger.error(f"User create/update error: {e}")

    today_orders_count = get_today_orders_count()

    if is_user_admin(telegram_id):
        users_count = TelegramUser.objects.count()
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OltinWash!</b> üåü

–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>! üëã
üëë <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üî• <b>–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–æ–π–∫–∞ –≤ –ß–∏—Ä—á–∏–∫–µ</b>
‚ú® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –≤–∞—à–∏–º –∞–≤—Ç–æ
üíé –í—ã—Å–æ—á–∞–π—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

üìä –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_orders_count}</b>
üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>

üöó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
        keyboard = get_admin_keyboard()
    else:
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OltinWash!</b> üåü

–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>! üëã

üî• <b>–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–æ–π–∫–∞ –≤ –ß–∏—Ä—á–∏–∫–µ</b>
‚ú® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –≤–∞—à–∏–º –∞–≤—Ç–æ
üíé –í—ã—Å–æ—á–∞–π—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

üìä –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_orders_count}</b>

üöó <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>
"""
        keyboard = get_services_keyboard()

    send_message(chat_id, welcome_text, keyboard)


def handle_new_order(chat_id, message_id):
    text = """
üèÜ <b>–°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê</b> üèÜ

üî• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–π–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ:</b>

üìù <i>–ü–æ—à–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:</i>
1Ô∏è‚É£ –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
2Ô∏è‚É£ –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è  
3Ô∏è‚É£ –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
4Ô∏è‚É£ –£–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
5Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
"""
    keyboard = get_services_keyboard()
    edit_message(chat_id, message_id, text, keyboard)


def handle_service_selection(chat_id, message_id, service_id, user_id):
    try:
        service = Services.objects.get(id=service_id)

        state = get_user_state(user_id)
        state['step'] = 'service_selected'
        state['service_id'] = service_id
        state['service_name'] = service.name_services
        set_user_state(user_id, state)

        text = f"""
üéØ <b>–í–´–ë–û–† –ö–õ–ê–°–°–ê –£–°–õ–£–ì–ò</b>

üöó <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> {service.name_services}

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</b>
"""
        keyboard = get_service_classes_keyboard(service_id)
        edit_message(chat_id, message_id, text, keyboard)
    except Services.DoesNotExist:
        edit_message(chat_id, message_id, "‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def handle_class_selection(chat_id, message_id, class_id, user_id):
    try:
        service_class = ServiceClasses.objects.get(id=class_id)

        state = get_user_state(user_id)
        state['step'] = 'class_selected'
        state['class_id'] = class_id
        state['class_name'] = service_class.name
        state['default_price'] = float(service_class.price) if service_class.price else 0
        set_user_state(user_id, state)

        price_text = f"{int(service_class.price):,} UZS" if service_class.price else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è —Ü–µ–Ω–∞"

        text = f"""
üë®‚Äçüîß <b>–í–´–ë–û–† –ú–ê–°–¢–ï–†–ê</b>

‚≠ê <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:</b> {service_class.name}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}

üî• <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:</b>
"""
        keyboard = get_employees_keyboard()
        edit_message(chat_id, message_id, text, keyboard)
    except ServiceClasses.DoesNotExist:
        edit_message(chat_id, message_id, "‚ùå –ö–ª–∞—Å—Å —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def handle_employee_selection(chat_id, message_id, employee_id, user_id):
    try:
        employee = Employees.objects.get(id=employee_id)

        state = get_user_state(user_id)
        state['step'] = 'employee_selected'
        state['employee_id'] = employee_id
        state['employee_name'] = str(employee)
        set_user_state(user_id, state)

        price_text = f"{int(state['default_price']):,} UZS" if state['default_price'] else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"

        text = f"""
üí∞ <b>–£–ö–ê–ó–ê–ù–ò–ï –¶–ï–ù–´</b>

üë®‚Äçüîß <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä:</b> {employee}
üíµ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞:</b> {price_text}

üîπ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""

        buttons = []
        if state['default_price']:
            buttons.append([{
                'text': f"‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é ({int(state['default_price']):,} UZS)",
                'callback_data': f"price_default"
            }])

        buttons.extend([
            [{'text': '‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É', 'callback_data': 'price_custom'}],
            [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º', 'callback_data': 'back_to_employees'}]
        ])

        keyboard = {'inline_keyboard': buttons}
        edit_message(chat_id, message_id, text, keyboard)
    except Employees.DoesNotExist:
        edit_message(chat_id, message_id, "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def handle_price_selection(chat_id, message_id, user_id, price_type):
    state = get_user_state(user_id)

    if price_type == 'default':
        state['step'] = 'price_set'
        state['final_price'] = state['default_price']
        set_user_state(user_id, state)
        request_photo(chat_id, message_id, user_id)

    elif price_type == 'custom':
        state['step'] = 'waiting_price'
        state['price_message_id'] = message_id
        set_user_state(user_id, state)

        text = f"""
‚úèÔ∏è <b>–í–í–û–î –¶–ï–ù–´</b>

üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞:</b>

üìù <i>–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)</i>
‚ö†Ô∏è <i>–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤</i>

üîô <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start</i>
"""

        edit_message(chat_id, message_id, text)


def request_photo(chat_id, message_id, user_id):
    state = get_user_state(user_id)

    price_text = f"{int(state['final_price']):,} UZS" if state['final_price'] else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"

    text = f"""
üì∏ <b>–ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û</b>

‚úÖ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
üöó –£—Å–ª—É–≥–∞: {state['service_name']}
‚≠ê –ö–ª–∞—Å—Å: {state['class_name']}
üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {state['employee_name']}
üí∞ –¶–µ–Ω–∞: {price_text}

üì∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>

‚ö†Ô∏è <i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞!</i>
üîô <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start</i>
"""

    state['step'] = 'waiting_photo'
    set_user_state(user_id, state)

    if message_id:
        edit_message(chat_id, message_id, text)
    else:
        send_message(chat_id, text)


def create_order(chat_id, user_id, photo_content, file_name):
    try:
        state = get_user_state(user_id)

        service_class = ServiceClasses.objects.get(id=state['class_id'])
        employee = Employees.objects.get(id=state['employee_id'])

        order = WashOrders()
        order.type_of_car_wash = service_class
        order.employees = employee
        order.negotiated_price = state['final_price']

        order.car_photo.save(file_name, ContentFile(photo_content), save=False)
        order.save()

        clear_user_state(user_id)

        price_text = f"{int(state['final_price']):,} UZS" if state['final_price'] else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"

        success_text = f"""
‚úÖ <b>–ó–ê–ö–ê–ó –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!</b>

üéâ <b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
üöó –£—Å–ª—É–≥–∞: {state['service_name']}
‚≠ê –ö–ª–∞—Å—Å: {state['class_name']}
üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {state['employee_name']}
üí∞ –¶–µ–Ω–∞: {price_text}
üìÖ –î–∞—Ç–∞: {format_datetime(order.time_create)}

‚ú® <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä OltinWash!</b>
"""

        keyboard = {
            'inline_keyboard': [[
                {'text': 'üöó –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', 'callback_data': 'new_order'},
                {'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}
            ]]
        }

        send_message(chat_id, success_text, keyboard)
        return True

    except Exception as e:
        logger.error(f"Order creation error: {e}")
        error_text = """
‚ùå <b>–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê</b>

üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ
"""
        send_message(chat_id, error_text)
        clear_user_state(user_id)
        return False


def handle_recent_orders(chat_id, message_id):
    try:
        orders = WashOrders.objects.order_by('-time_create')[:10]

        if not orders:
            text = "üìã <b>–ó–ê–ö–ê–ó–´ –ù–ï –ù–ê–ô–î–ï–ù–´</b>\n\nüîç –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"
        else:
            text = f"üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´</b>\n\nüìä <b>–ü–æ–∫–∞–∑–∞–Ω–æ:</b> {len(orders)}\n\n"

            for order in orders:
                status = "‚úÖ" if order.is_completed else "‚è≥"
                price = f"{int(order.negotiated_price):,} UZS" if order.negotiated_price else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
                date = format_datetime(order.time_create)

                text += f"{status} <b>#{order.id}</b> - {order.type_of_car_wash.name}\n"
                text += f"üë®‚Äçüîß {order.employees}\n"
                text += f"üí∞ {price} | üìÖ {date}\n\n"

        back_button = {
            'inline_keyboard': [[
                {'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'admin_menu'}
            ]]
        }

        edit_message(chat_id, message_id, text, back_button)

    except Exception as e:
        logger.error(f"Recent orders error: {e}")
        edit_message(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")


def handle_list_users(chat_id, message_id):
    users = TelegramUser.objects.all().order_by('-created_at')

    users_text = f"""
üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>

üìä <b>–í—Å–µ–≥–æ:</b> {users.count()}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
"""

    for i, user in enumerate(users[:20], 1):
        admin_mark = " üëë" if user.is_admin else ""
        username_text = f" (@{user.username})" if user.username else ""
        users_text += f"<code>{i}. {user.telegram_id}</code> - {user.first_name}{username_text}{admin_mark}\n"

    if users.count() > 20:
        users_text += f"\n... –∏ –µ—â–µ {users.count() - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    back_button = {
        'inline_keyboard': [[
            {'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'admin_menu'}
        ]]
    }

    edit_message(chat_id, message_id, users_text, back_button)


def handle_admin_menu(chat_id, message_id):
    today_orders_count = get_today_orders_count()
    users_count = TelegramUser.objects.count()

    text = f"""
üåü <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å OltinWash</b> üåü

üëë <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_orders_count}</b>
üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>

üöó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""

    keyboard = get_admin_keyboard()
    edit_message(chat_id, message_id, text, keyboard)


def handle_add_user_start(chat_id, message_id, user_id):
    state = get_user_state(user_id)
    state['step'] = 'waiting_user_id'
    set_user_state(user_id, state)

    text = """
üë§ <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

üìù <b>–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>

üí° <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID</i>

‚ö†Ô∏è <i>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)</i>

üîô <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start</i>
"""

    edit_message(chat_id, message_id, text)


def handle_add_user_process(chat_id, user_id, telegram_id_to_add):
    try:
        if TelegramUser.objects.filter(telegram_id=str(telegram_id_to_add)).exists():
            error_text = f"""
‚ùå <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{telegram_id_to_add}</code> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
"""
            send_message(chat_id, error_text)
            return

        user = TelegramUser.objects.create(
            telegram_id=str(telegram_id_to_add),
            first_name="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            is_admin=False
        )

        clear_user_state(user_id)

        success_text = f"""
‚úÖ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù –£–°–ü–ï–®–ù–û!</b>

üë§ <b>Telegram ID:</b> <code>{telegram_id_to_add}</code>
üìÖ <b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {format_datetime(user.created_at)}

‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!

üí° <i>–ò–º—è –∏ username –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É</i>
"""

        keyboard = {
            'inline_keyboard': [[
                {'text': 'üë§ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'callback_data': 'add_user'},
                {'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'admin_menu'}
            ]]
        }

        send_message(chat_id, success_text, keyboard)

    except Exception as e:
        logger.error(f"Add user error: {e}")
        error_text = """
‚ùå <b>–û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start
"""
        send_message(chat_id, error_text)
        clear_user_state(user_id)


def send_access_denied(chat_id, user_data):
    user_id = user_data['id']
    user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    deny_text = f"""
üö´ <b>–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù</b> üö´

‚ùå <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, {user_name}!</b>

üîí –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üë§ <b>–í–∞—à ID:</b> <code>{user_id}</code>

üìû <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>

‚ö†Ô∏è <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏</b>
"""

    send_message(chat_id, deny_text)


def process_message(message_data):
    chat_id = message_data['chat']['id']
    user_data = message_data['from']
    user_id = user_data['id']
    text = message_data.get('text', '')

    if not is_user_authorized(user_id):
        send_access_denied(chat_id, user_data)
        return

    state = get_user_state(user_id)

    if text == '/start':
        handle_start_command(chat_id, user_data)
        return

    if state.get('step') == 'waiting_price':
        if re.match(r'^\d+$', text.strip()):
            price = float(text.strip())
            state['step'] = 'price_set'
            state['final_price'] = price
            set_user_state(user_id, state)
            request_photo(chat_id, None, user_id)
        else:
            error_text = """
‚ùå <b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –¶–ï–ù–´</b>

üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)
‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã
"""
            send_message(chat_id, error_text)
        return

    if state.get('step') == 'waiting_user_id':
        if re.match(r'^\d+$', text.strip()):
            telegram_id_to_add = int(text.strip())
            handle_add_user_process(chat_id, user_id, telegram_id_to_add)
        else:
            error_text = """
‚ùå <b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ ID</b>

üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)
‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤

üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID —É –±–æ—Ç–∞ @userinfobot

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã
"""
            send_message(chat_id, error_text)
        return

    if text == '/users' and is_user_admin(user_id):
        users = TelegramUser.objects.all().order_by('-created_at')
        users_text = f"üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\nüìä <b>–í—Å–µ–≥–æ:</b> {users.count()}\n\n"

        for i, user in enumerate(users[:20], 1):
            admin_mark = " üëë" if user.is_admin else ""
            username_text = f" (@{user.username})" if user.username else ""
            users_text += f"<code>{i}. {user.telegram_id}</code> - {user.first_name}{username_text}{admin_mark}\n"

        send_message(chat_id, users_text)
    else:
        help_text = """
‚ùì <b>–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ö–û–ú–ê–ù–î–ê</b>

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
- /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
- /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üöó <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º</b>
"""
        send_message(chat_id, help_text)


def process_photo(message_data):
    chat_id = message_data['chat']['id']
    user_data = message_data['from']
    user_id = user_data['id']

    if not is_user_authorized(user_id):
        send_access_denied(chat_id, user_data)
        return

    state = get_user_state(user_id)

    if state.get('step') != 'waiting_photo':
        send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        photo = message_data['photo'][-1]
        file_id = photo['file_id']

        photo_content = download_photo(file_id)

        if photo_content:
            tashkent_time = get_tashkent_time()
            file_name = f"car_photo_{user_id}_{tashkent_time.strftime('%Y%m%d_%H%M%S')}.jpg"

            success = create_order(chat_id, user_id, photo_content, file_name)

            if not success:
                send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

    except Exception as e:
        logger.error(f"Photo processing error: {e}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def process_callback_query(callback_data):
    query_id = callback_data['id']
    chat_id = callback_data['message']['chat']['id']
    message_id = callback_data['message']['message_id']
    user_data = callback_data['from']
    user_id = user_data['id']
    data = callback_data['data']

    if not is_user_authorized(user_id):
        answer_callback_query(query_id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    answer_callback_query(query_id)

    if data == 'main_menu':
        clear_user_state(user_id)
        handle_start_command(chat_id, user_data)
    elif data == 'new_order':
        clear_user_state(user_id)
        handle_new_order(chat_id, message_id)
    elif data == 'list_users':
        if is_user_admin(user_id):
            handle_list_users(chat_id, message_id)
    elif data == 'recent_orders':
        if is_user_admin(user_id):
            handle_recent_orders(chat_id, message_id)
    elif data == 'admin_menu':
        if is_user_admin(user_id):
            handle_admin_menu(chat_id, message_id)
    elif data == 'back_to_services':
        clear_user_state(user_id)
        handle_new_order(chat_id, message_id)
    elif data == 'back_to_classes':
        state = get_user_state(user_id)
        if 'service_id' in state:
            handle_service_selection(chat_id, message_id, state['service_id'], user_id)
    elif data == 'back_to_employees':
        state = get_user_state(user_id)
        if 'class_id' in state:
            handle_class_selection(chat_id, message_id, state['class_id'], user_id)
    elif data.startswith('service_'):
        service_id = int(data.split('_')[1])
        handle_service_selection(chat_id, message_id, service_id, user_id)
    elif data.startswith('class_'):
        class_id = int(data.split('_')[1])
        handle_class_selection(chat_id, message_id, class_id, user_id)
    elif data.startswith('employee_'):
        employee_id = int(data.split('_')[1])
        handle_employee_selection(chat_id, message_id, employee_id, user_id)
    elif data == 'price_default':
        handle_price_selection(chat_id, message_id, user_id, 'default')
    elif data == 'price_custom':
        handle_price_selection(chat_id, message_id, user_id, 'custom')
    elif data == 'add_user':
        if is_user_admin(user_id):
            clear_user_state(user_id)
            handle_add_user_start(chat_id, message_id, user_id)


def verify_telegram_request(request):
    user_agent = request.headers.get('User-Agent', '')
    if not user_agent.startswith('TelegramBot'):
        logger.warning(f"Invalid User-Agent: {user_agent}")
        return False

    if WEBHOOK_SECRET:
        secret_token = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        if secret_token != WEBHOOK_SECRET:
            logger.warning(f"Invalid secret token from {request.META.get('REMOTE_ADDR')}")
            return False

    return True


@csrf_exempt
@require_POST
def telegram_webhook(request):
    try:
        if not verify_telegram_request(request):
            logger.warning(f"Unauthorized access from {request.META.get('REMOTE_ADDR')}")
            return HttpResponseForbidden("Access denied")

        if not BOT_TOKEN:
            logger.error("Bot not configured")
            return HttpResponseForbidden("Bot not configured")

        logger.info("Secure webhook received")

        update_data = json.loads(request.body.decode('utf-8'))

        if 'message' in update_data:
            message = update_data['message']

            if 'photo' in message:
                process_photo(message)
            elif 'text' in message:
                process_message(message)

        elif 'callback_query' in update_data:
            process_callback_query(update_data['callback_query'])

        return HttpResponse("OK")

    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        return HttpResponse("Invalid JSON", status=400)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return HttpResponse(f"Error: {str(e)}", status=500)
